package com.itszuvalex.femtocraft.api.power.plasma;

import net.minecraft.world.World;

/**
 * Created by Christopher Harris (Itszuvalex) on 5/8/14.
 */
public interface IFusionReaction {

    /**
     * Update, which by proxy updates everything inside of it
     *
     * @param world World containing the core
     * @param x     x coordinate of the core
     * @param y     y coordinate of the core
     * @param z     z coordinate of the core
     */
    void update(IFusionReactorCore core, World world, int x, int y, int z);

    /**
     * @return The core sustaining this fusion reaction.
     */
    IFusionReactorCore getCore();

    /**
     * @param core Core to set as sustainer for this reaction.
     */
    void setCore(IFusionReactorCore core);

    /**
     * @return True if the reactor is in self-sustaining state.
     */
    boolean isSelfSustaining();

    /**
     * @return True if the reactor is in the process of igniting.
     */
    boolean isIgniting();

    /**
     * @return Number of ticks from beginning to end of ignition process.
     */
    int getIgnitionProcessWindow();

    /**
     * @return Amount of power required to maintain the reaction.
     */
    long getReactionFailureThreshold();

    /**
     * @return Amount of power required to ignite/continue the reaction.
     */
    long getReactionThreshold();

    /**
     * @return Measure of how stable the reaction occurring in the core is.
     */
    int getReactionInstability();

    /**
     * @return Plasma flow generated by this reaction.  Different reactions could potentially produce different types of
     * plasma flows.
     */
    IPlasmaFlow generateFlow();

    /**
     * @return Amount of energy currently invested in the reaction.
     */
    long getReactionEnergy();

    /**
     * @param energy Amount of energy to consume
     * @return True if energy is wholly consumed, false otherwise.
     */
    boolean consumeReactionEnergy(long energy);

    /**
     * @param energy Amount of energy to add to the reaction
     * @return Returns the amount of energy used from energy
     */
    long contributeReactionEnergy(long energy);

    /**
     * Called to begin the ignition process
     */
    void beginIgnitionProcess();

    /**
     * Called to end the ignition process
     */
    void endIgnitionProcess();

    /**
     * Brings an end to the self-sustaiing reaction.  Does nothing if reaction isn't self-sustaining (dormant or
     * igniting)
     */
    void endSelfSustainingReaction();
}
