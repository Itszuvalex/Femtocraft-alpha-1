/*
 * ******************************************************************************
 *  * Copyright (C) 2013  Christopher Harris (Itszuvalex)
 *  * Itszuvalex@gmail.com
 *  *
 *  * This program is free software; you can redistribute it and/or
 *  * modify it under the terms of the GNU General Public License
 *  * as published by the Free Software Foundation; either version 2
 *  * of the License, or (at your option) any later version.
 *  *
 *  * This program is distributed in the hope that it will be useful,
 *  * but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  * GNU General Public License for more details.
 *  *
 *  * You should have received a copy of the GNU General Public License
 *  * along with this program; if not, write to the Free Software
 *  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *  *****************************************************************************
 */
package com.itszuvalex.femtocraft.power.tiles

import com.itszuvalex.femtocraft.FemtocraftGuiConstants
import com.itszuvalex.femtocraft.api.EnumTechLevel
import com.itszuvalex.femtocraft.api.core.Configurable
import com.itszuvalex.femtocraft.api.power.{IPhlegethonTunnelAddon, IPhlegethonTunnelCore, IPowerTileContainer}
import com.itszuvalex.femtocraft.core.tiles.TileEntityBase
import com.itszuvalex.femtocraft.core.traits.tile.MultiBlockComponent
import com.itszuvalex.femtocraft.power.FemtocraftPowerUtils
import com.itszuvalex.femtocraft.power.tiles.TileEntitySisyphusStabilizer._
import net.minecraft.entity.player.EntityPlayer
import net.minecraftforge.common.util.ForgeDirection
import net.minecraftforge.common.util.ForgeDirection._

/**
 * Created by Christopher Harris (Itszuvalex) on 7/13/14.
 */
object TileEntitySisyphusStabilizer {
  @Configurable(comment = "Raises the base power generated by the core to this exponent.")
  val Exponent : Float = 0.4f
  @Configurable(comment = "Offset for height.  In this case, 1 is added to the height for the purposes of " + "calculation.")
  val Offset   : Int   = 1
  @Configurable(comment = "Flat amount of power generated by tick.")
  val FlatBonus: Int   = 5
}

@Configurable class TileEntitySisyphusStabilizer extends TileEntityBase with IPhlegethonTunnelAddon with MultiBlockComponent with IPowerTileContainer {
  override def getPowerContribution(core: IPhlegethonTunnelCore): Float = {
    var amount: Float = 0
    amount += Math.pow(core.getPowerGenBase, Exponent).toFloat
    amount *= Math.log(worldObj.getActualHeight + Offset - yCoord).toFloat
    amount /= 6
    amount += FlatBonus
    amount
  }

  override def femtocraftServerUpdate() {
    super.femtocraftServerUpdate()
    FemtocraftPowerUtils.distributePower(this, null, worldObj, xCoord, yCoord, zCoord)
  }

  override def onCoreActivityChange(active: Boolean) {
    setUpdate()
  }

  override def onSideActivate(par5EntityPlayer: EntityPlayer, side: Int): Boolean = {
    if (isValidMultiBlock && canPlayerUse(par5EntityPlayer)) {
      par5EntityPlayer.openGui(getMod, getGuiID, worldObj, info.x, info.y, info.z)
      return true
    }
    false
  }

  override def getGuiID = FemtocraftGuiConstants.PhlegethonTunnelGuiID

  override def canAcceptPowerOfLevel(level: EnumTechLevel, from: ForgeDirection): Boolean = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.canAcceptPowerOfLevel(level, from)
        case _                              =>
      }
    }
    false
  }

  override def getTechLevel(to: ForgeDirection): EnumTechLevel = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getTechLevel(to)
        case _                              =>
      }
    }
    null
  }

  override def getCurrentPower: Int = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getCurrentPower
        case _                              =>
      }
    }
    0
  }

  override def getMaxPower: Int = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getMaxPower
        case _                              =>
      }
    }
    0
  }

  override def getFillPercentage: Float = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getFillPercentage
        case _                              =>
      }
    }
    1f
  }

  override def getFillPercentageForCharging(from: ForgeDirection): Float = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getFillPercentageForCharging(from)
        case _                              =>
      }
    }
    1f
  }

  def getFillPercentageForOutput(to: ForgeDirection): Float = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.getFillPercentageForOutput(to)
        case _                              =>
      }
    }
    0f
  }

  def canCharge(from: ForgeDirection): Boolean = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.canCharge(from)
        case _                              =>
      }
    }
    false
  }

  def canConnect(from: ForgeDirection): Boolean = {
    if (isValidMultiBlock) {
      from match {
        case UP    => if (yCoord - info.y != 1) return false
        case DOWN  => if (yCoord - info.y != -1) return false
        case NORTH => if (zCoord - info.z != -1) return false
        case SOUTH => if (zCoord - info.z != 1) return false
        case EAST  => if (xCoord - info.x != 1) return false
        case WEST  => if (xCoord - info.x != -1) return false
        case _     =>
      }
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.canConnect(from)
        case _                              =>
      }
    }
    false
  }

  def charge(from: ForgeDirection, amount: Int): Int = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.charge(from, amount)
        case _                              =>
      }
    }
    0
  }

  def consume(amount: Int): Boolean = {
    if (isValidMultiBlock) {
      worldObj.getTileEntity(info.x, info.y, info.z) match {
        case container: IPowerTileContainer =>
          return container.consume(amount)
        case _                              =>
      }
    }
    false
  }
}
