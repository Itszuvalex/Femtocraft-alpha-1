package com.itszuvalex.femtocraft.api.power.plasma

import net.minecraft.world.World

/**
 * Created by Christopher Harris (Itszuvalex) on 5/8/14.
 */
trait IFusionReaction {
  /**
   * Update, which by proxy updates everything inside of it
   *
   * @param world World containing the core
   * @param x     x coordinate of the core
   * @param y     y coordinate of the core
   * @param z     z coordinate of the core
   */
  def update(core: IFusionReactorCore, world: World, x: Int, y: Int, z: Int)

  /**
   * @return The core sustaining this fusion reaction.
   */
  def getCore: IFusionReactorCore

  /**
   * @param core Core to set as sustainer for this reaction.
   */
  def setCore(core: IFusionReactorCore)

  /**
   * @return True if the reactor is in self-sustaining state.
   */
  def isSelfSustaining: Boolean

  /**
   * @return True if the reactor is in the process of igniting.
   */
  def isIgniting: Boolean

  /**
   * @return Number of ticks from beginning to end of ignition process.
   */
  def getIgnitionProcessWindow: Int

  /**
   * @return Amount of power required to maintain the reaction.
   */
  def getReactionFailureThreshold: Long

  /**
   * @return Amount of power required to ignite/continue the reaction.
   */
  def getReactionThreshold: Long

  /**
   * @return Measure of how stable the reaction occurring in the core is.
   */
  def getReactionInstability: Int

  /**
   * @return Plasma flow generated by this reaction.  Different reactions could potentially produce different types of
   *         plasma flows.
   */
  def generateFlow: IPlasmaFlow

  /**
   * @return Amount of energy currently invested in the reaction.
   */
  def getReactionEnergy: Long

  /**
   * @param energy Amount of energy to consume
   * @return True if energy is wholly consumed, false otherwise.
   */
  def consumeReactionEnergy(energy: Long): Boolean

  /**
   * @param energy Amount of energy to add to the reaction
   * @return Returns the amount of energy used from energy
   */
  def contributeReactionEnergy(energy: Long): Long

  /**
   * Called to begin the ignition process
   */
  def beginIgnitionProcess()

  /**
   * Called to end the ignition process
   */
  def endIgnitionProcess()

  /**
   * Brings an end to the self-sustaiing reaction.  Does nothing if reaction isn't self-sustaining (dormant or
   * igniting)
   */
  def endSelfSustainingReaction()
}
