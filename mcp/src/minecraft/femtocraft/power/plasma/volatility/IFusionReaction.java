/*******************************************************************************
 * Copyright (C) 2013  Christopher Harris (Itszuvalex)
 * Itszuvalex@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 ******************************************************************************/

package femtocraft.power.plasma.volatility;

import femtocraft.power.plasma.IPlasmaFlow;

/**
 * Created by Christopher Harris (Itszuvalex) on 5/8/14.
 */
public interface IFusionReaction {

    /**
     * @return True if the reactor is in self-sustaining state.
     */
    boolean isSelfSustaining();

    /**
     * @return True if the reactor is in the process of igniting.
     */
    boolean isIgniting();

    /**
     * @return Number of ticks from beginning to end of ignition process.
     */
    int getIgnitionProcessWindow();

    /**
     * @return Amount of power required to maintain the reaction.
     */
    int getReactorFailureThreshold();

    /**
     * @return Amount of power required to ignite/continue the reaction.
     */
    int getReactionThreshold();

    /**
     * @return Measure of how stable the reaction occurring in the core is.
     */
    int getReactionStability();

    /**
     * @return Plasma flow generated by this reaction.  Different reactions
     * could potentially produce different types of plasma flows.
     */
    IPlasmaFlow generateFlow();

    /**
     * @return Amount of energy currently invested in the reaction.
     */
    int getReactionEnergy();

    /**
     * @param energy Amount of energy to consume
     * @return True if energy is wholly consumed, false otherwise.
     */
    boolean consumeReactionEnergy(int energy);

    /**
     * @param energy Amount of energy to add to the reaction
     * @return Returns the amount of energy used from energy
     */
    int contributeReactionEnergy(int energy);
}
